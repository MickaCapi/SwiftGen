// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

{% if structuredStrings %}
import Foundation

// swiftlint:disable file_length
// swiftlint:disable line_length

// swiftlint:disable type_body_length
// swiftlint:disable nesting
// swiftlint:disable variable_name
// swiftlint:disable valid_docs
{% define recursiveBlock strings tb %}
{{args.tb}}  {% for string in args.strings.strings %}
{{args.tb}}  /// {{string.translation}}
{{args.tb}}  {% if string.params %}
{{args.tb}}  static func {{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase|escapeReservedKeywords}}({{string.params.typednames|join}}) -> String {
{{args.tb}}    return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
{{args.tb}}  }
{{args.tb}}  {% else %}
{{args.tb}}  static let {{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase|escapeReservedKeywords}} = {{enumName}}.tr("{{string.key}}")
{{args.tb}}  {% endif %}
{{args.tb}}  {% endfor %}
{{args.tb}}  {% if args.strings.subenums %}
{{args.tb}}  {% for subenum in args.strings.subenums %}

{{args.tb}}  enum {{subenum.name|swiftIdentifier|titlecase|snakeToCamelCase}} {
{{args.tb}}    {% set tb %}{{args.tb}}  {% endset %}
{{args.tb}}    {% call recursiveBlock subenum tb %}
{{args.tb}}  }
{{args.tb}}  {% endfor %}
{{args.tb}}  {% endif %}
{% enddefine %}

enum {{enumName}} {
  {% call recursiveBlock structuredStrings tb %}
}

extension {{enumName}} {
  private static func tr(key: String, _ args: CVarArgType...) -> String {
    let format = NSLocalizedString(key, comment: "")
    return String(format: format, locale: NSLocale.currentLocale(), arguments: args)
  }
}

// swiftlint:enable type_body_length
// swiftlint:enable nesting
// swiftlint:enable variable_name
// swiftlint:enable valid_docs
{% else %}
// No string found
{% endif %}
